# Task ID: 11
# Title: Implement Keyboard Navigation and Screen Reader Support
# Status: pending
# Dependencies: 3, 5, 8, 9
# Priority: high
# Description: Ensure proper keyboard navigation through cards, overlays, and panels, and add screen reader support for accessibility.
# Details:
Implement accessibility improvements:
- Set up proper tab order through all interactive elements
- Add appropriate ARIA attributes to components
- Ensure each agent card announces name, role, department, and status to screen readers
- Implement keyboard shortcuts for common actions
- Add focus indicators that are visible and meet accessibility standards

Implementation approach:
```jsx
// Example of accessible agent card
const AccessibleAgentCard = ({ agent }) => {
  return (
    <div 
      className="agent-card" 
      tabIndex="0"
      role="button"
      aria-label={`${agent.name}, ${agent.role}, ${agent.department}, Status: ${agent.status}`}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          // Handle selection/activation
          selectAgent(agent);
        }
      }}
    >
      {/* Card content */}
    </div>
  );
};

// Focus trap for modals/overlays
function setupFocusTrap(containerRef) {
  const focusableElements = containerRef.current.querySelectorAll(
    'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
  );
  
  const firstElement = focusableElements[0];
  const lastElement = focusableElements[focusableElements.length - 1];
  
  // Focus first element when opened
  firstElement.focus();
  
  // Handle tab key to trap focus
  containerRef.current.addEventListener('keydown', (e) => {
    if (e.key === 'Tab') {
      if (e.shiftKey && document.activeElement === firstElement) {
        e.preventDefault();
        lastElement.focus();
      } else if (!e.shiftKey && document.activeElement === lastElement) {
        e.preventDefault();
        firstElement.focus();
      }
    }
  });
}
```

# Test Strategy:
Test with keyboard-only navigation to ensure all functionality is accessible. Use screen readers to verify proper announcements. Validate against WCAG 2.1 AA standards using automated and manual testing.
