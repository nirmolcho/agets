# Task ID: 3
# Title: Redesign Agent Cards for Reduced Density
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Reduce text clutter on agent cards by showing only essential information at a glance and moving extended details to the side panel.
# Details:
Redesign agent cards to:
- Display only role, status, and department tag at a glance
- Create a clean, minimal design that reduces cognitive load
- Implement a consistent card structure with proper spacing
- Add hover states that highlight card edges
- Ensure cards maintain readability at different zoom levels

Component structure:
```jsx
const AgentCard = ({ agent }) => (
  <div className="agent-card">
    <div className="agent-card__header">
      <span className="agent-role">{agent.role}</span>
      <StatusIndicator status={agent.status} />
    </div>
    <div className="agent-card__body">
      <DepartmentTag department={agent.department} />
    </div>
    <div className="agent-card__hover-actions">
      <ActionButton type="start" />
      <ActionButton type="stop" />
      <ActionButton type="error" />
    </div>
  </div>
);
```

# Test Strategy:
Conduct usability testing to ensure users can quickly identify key information on cards. Verify that the design works across different screen sizes and densities. Test hover interactions to ensure they're intuitive and accessible.

# Subtasks:
## 1. Create Minimal Agent Card Component Structure [pending]
### Dependencies: None
### Description: Refactor the AgentCard component to display only essential information (role, status, and department tag) with a clean, minimal design.
### Details:
Modify the existing AgentCard component to remove any non-essential information. Restructure the JSX to have a cleaner hierarchy with proper semantic HTML elements. Ensure the component only displays role, status indicator, and department tag. Implement proper spacing between elements using CSS variables for consistency. Example implementation:
```jsx
const AgentCard = ({ agent }) => (
  <div className="agent-card">
    <div className="agent-card__header">
      <span className="agent-role">{agent.role}</span>
      <StatusIndicator status={agent.status} />
    </div>
    <div className="agent-card__body">
      <DepartmentTag department={agent.department} />
    </div>
  </div>
);
```

## 2. Implement Card Styling with Proper Spacing [pending]
### Dependencies: 3.1
### Description: Style the agent cards with consistent spacing, proper typography, and a clean layout that reduces cognitive load.
### Details:
Create CSS styles for the agent card that implement proper spacing and typography. Use CSS variables for consistent spacing throughout the component. Implement a clean, minimal design with appropriate whitespace. Ensure text is properly aligned and sized for readability. Example implementation:
```css
.agent-card {
  padding: var(--spacing-md);
  border-radius: var(--border-radius-sm);
  background-color: var(--card-bg);
  box-shadow: var(--shadow-sm);
  margin-bottom: var(--spacing-md);
  width: 100%;
  max-width: 300px;
}

.agent-card__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-sm);
}

.agent-role {
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-md);
  color: var(--text-primary);
}

.agent-card__body {
  margin-top: var(--spacing-sm);
}
```

## 3. Add Hover States and Interactive Elements [pending]
### Dependencies: 3.2
### Description: Implement hover states that highlight card edges and add interactive elements that appear on hover.
### Details:
Add hover effects to the agent cards that highlight the card edges when hovered. Implement the hover actions section that appears only when the card is hovered. Style the action buttons appropriately. Example implementation:
```css
.agent-card {
  /* existing styles */
  transition: box-shadow 0.2s ease, transform 0.2s ease;
  position: relative;
}

.agent-card:hover {
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
  border: 1px solid var(--primary-light);
}

.agent-card__hover-actions {
  position: absolute;
  bottom: 0;
  right: 0;
  padding: var(--spacing-sm);
  display: flex;
  gap: var(--spacing-xs);
  opacity: 0;
  transition: opacity 0.2s ease;
}

.agent-card:hover .agent-card__hover-actions {
  opacity: 1;
}
```

And update the JSX to include the hover actions:
```jsx
<div className="agent-card__hover-actions">
  <ActionButton type="start" />
  <ActionButton type="stop" />
  <ActionButton type="error" />
</div>
```

## 4. Ensure Readability at Different Zoom Levels [pending]
### Dependencies: 3.2
### Description: Optimize the agent card design to maintain readability and usability at different zoom levels and screen densities.
### Details:
Implement responsive design techniques to ensure the agent cards remain readable at different zoom levels. Use relative units (em, rem) for typography and spacing. Test and adjust the design at various zoom levels. Implement media queries if necessary to adjust the design at different screen sizes. Example implementation:
```css
.agent-card {
  /* existing styles */
  font-size: 1rem; /* Base font size */
}

.agent-role {
  font-size: 1.1em; /* Relative to parent */
}

/* Media query for smaller screens */
@media (max-width: 768px) {
  .agent-card {
    max-width: 100%;
    padding: var(--spacing-sm);
  }
}

/* Media query for larger screens */
@media (min-width: 1200px) {
  .agent-card {
    max-width: 350px;
  }
}
```

## 5. Connect Card Selection to Side Panel Details [pending]
### Dependencies: 3.1, 3.3
### Description: Implement the interaction between agent cards and the side panel to display extended details when a card is selected.
### Details:
Create the functionality to show extended agent details in the side panel when a card is clicked. Implement a selected state for the cards to indicate which agent's details are currently displayed. Add an onClick handler to the AgentCard component that triggers the display of extended details in the side panel. Example implementation:
```jsx
const AgentCard = ({ agent, isSelected, onSelect }) => (
  <div 
    className={`agent-card ${isSelected ? 'agent-card--selected' : ''}`}
    onClick={() => onSelect(agent.id)}
  >
    {/* existing card content */}
  </div>
);

// In parent component
const [selectedAgentId, setSelectedAgentId] = useState(null);

const handleSelectAgent = (agentId) => {
  setSelectedAgentId(agentId);
};

// Render side panel with selected agent details
{selectedAgentId && (
  <SidePanel 
    agent={agents.find(a => a.id === selectedAgentId)}
    onClose={() => setSelectedAgentId(null)}
  />
)}
```

Add selected state styling:
```css
.agent-card--selected {
  border: 2px solid var(--primary);
  box-shadow: var(--shadow-md);
}
```

