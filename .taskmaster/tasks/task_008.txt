# Task ID: 8
# Title: Enhance Task Panel with Prioritization and Sorting
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Improve the task panel with chips/tags for priority, sorting options, and a collapsible layout for long task lists.
# Details:
Implement task panel enhancements:
- Add color-coded priority chips/tags (high: red, medium: yellow, low: blue)
- Create sorting controls with clear affordances for different sort options (due date, priority, status)
- Implement collapsible sections for long task lists that expand on click
- Ensure consistent styling with the rest of the application

Component structure:
```jsx
const TaskPanel = ({ tasks }) => {
  const [sortBy, setSortBy] = useState('dueDate');
  const [expandedSections, setExpandedSections] = useState([]);
  
  const sortedTasks = useMemo(() => {
    return sortTasks(tasks, sortBy);
  }, [tasks, sortBy]);
  
  const tasksBySection = groupTasksBySection(sortedTasks);
  
  return (
    <div className="task-panel">
      <div className="task-panel__header">
        <h2>Tasks</h2>
        <div className="sort-controls">
          <label>Sort by:</label>
          <select value={sortBy} onChange={e => setSortBy(e.target.value)}>
            <option value="dueDate">Due Date</option>
            <option value="priority">Priority</option>
            <option value="status">Status</option>
          </select>
        </div>
      </div>
      
      {Object.entries(tasksBySection).map(([section, sectionTasks]) => (
        <TaskSection 
          key={section}
          title={section}
          tasks={sectionTasks}
          isExpanded={expandedSections.includes(section)}
          onToggle={() => toggleSection(section)}
        />
      ))}
    </div>
  );
};
```

# Test Strategy:
Test with various task list lengths to ensure the collapsible sections work properly. Verify sorting functionality works correctly for all sort options. Test with keyboard navigation to ensure accessibility.

# Subtasks:
## 1. Implement Priority Chips/Tags Component [pending]
### Dependencies: None
### Description: Create a reusable component for displaying color-coded priority tags that will be used within task items.
### Details:
Create a PriorityTag component that accepts a priority level ('high', 'medium', 'low') and renders an appropriately styled and color-coded chip/tag. Use the specified colors (high: red, medium: yellow, low: blue) and ensure the component has good contrast for accessibility. Include a small icon or visual indicator alongside the text label for better visual recognition.

## 2. Enhance Sorting Controls with Improved UI [pending]
### Dependencies: 8.1
### Description: Improve the existing sort controls with better visual affordances and interaction feedback.
### Details:
Refactor the existing select dropdown for sorting into a more visually appealing component with clear affordances. Add visual indicators for the current sort direction (ascending/descending). Implement a toggle for sort direction and update the sortTasks function to handle both the sort field and direction. Style the controls to match the application's design system.

## 3. Implement Collapsible Task Sections [pending]
### Dependencies: None
### Description: Create a collapsible section component for grouping tasks and implement the expand/collapse functionality.
### Details:
Complete the TaskSection component that renders a collapsible section with a header, toggle control, and task list. Implement the toggleSection function to update the expandedSections state. Add smooth animations for expanding/collapsing sections. Ensure the toggle control has appropriate accessibility attributes (aria-expanded, aria-controls) and can be operated by keyboard.

## 4. Implement Task Grouping and Sorting Logic [pending]
### Dependencies: 8.2
### Description: Create utility functions to group and sort tasks based on different criteria.
### Details:
Implement the sortTasks function to handle sorting by dueDate, priority, and status. Create the groupTasksBySection function to organize tasks into logical sections (e.g., by due date: 'Today', 'This Week', 'Later', or by status: 'To Do', 'In Progress', 'Done'). Ensure sorting respects the selected sort direction. Optimize the functions using memoization to prevent unnecessary re-calculations.

## 5. Integrate Components and Ensure Consistent Styling [pending]
### Dependencies: 8.1, 8.2, 8.3, 8.4
### Description: Assemble all components into the final TaskPanel and ensure consistent styling throughout.
### Details:
Integrate the PriorityTag component into task items. Connect the sorting controls to the sort logic. Ensure the TaskPanel correctly uses the groupTasksBySection function and renders TaskSection components. Apply consistent styling for all elements according to the application's design system. Add responsive styles to ensure the panel works well on different screen sizes. Implement loading and empty states for the task panel.

